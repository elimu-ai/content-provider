apply plugin: 'com.android.application'
apply plugin: 'org.ajoberstar.grgit'

android {
    compileSdk 34
    namespace 'ai.elimu.content_provider'

    defaultConfig {
        applicationId "ai.elimu.content_provider"
        minSdkVersion 24
        targetSdkVersion 34
        versionCode 1002028
        versionName "1.2.28-SNAPSHOT"
        setProperty("archivesBaseName", "${applicationId}-${versionCode}")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "${projectDir}/schemas".toString()]
            }
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
        qa_test {
            initWith debug
            applicationIdSuffix ".test"
            versionNameSuffix "-test"
        }
        release {
            minifyEnabled false
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.github.elimu-ai:model:model-2.0.78' // See https://jitpack.io/#elimu-ai/model

    implementation 'commons-io:commons-io:2.17.0'
    implementation 'com.google.android.material:material:1.5.0'

    // AndroidX
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.navigation:navigation-fragment:2.4.2'
    implementation 'androidx.navigation:navigation-ui:2.4.2'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.11.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.11.0'

    // Room components
    implementation "androidx.room:room-runtime:2.4.2"
    annotationProcessor "androidx.room:room-compiler:2.4.2"
    androidTestImplementation "androidx.room:room-testing:2.4.2"

    testImplementation 'junit:junit:4.13.2'

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

task ensureCleanRepo {
    doLast {
        if (!grgit.repository.jgit.status().call().clean) {
            throw new GradleException('Git status is not clean, please stash your changes!')
        }
    }
}

task releaseClean(dependsOn: ensureCleanRepo) {
    doLast {
        def clean = true
        def applicationId = android.defaultConfig.applicationId

        String headCommitMessage = grgit.head().shortMessage
        while (headCommitMessage.contains("[gradle-release-task]")) {
            clean = false
            println "Found git commit: $headCommitMessage"
            if (headCommitMessage.indexOf("$applicationId-") > -1) {
                def tagName = headCommitMessage.split("$applicationId-")[1]
                println "Removing the git tag: $tagName"
                try {
                    grgit.tag.remove {
                        names = [tagName]
                    }
                } catch (Exception e) {
                    println "Error while removing git tag:\n $e"
                }
            }
            println "Resetting the git commit permanently!"
            grgit.reset(commit: "HEAD~1", mode: "hard")
            headCommitMessage = grgit.head().shortMessage

        }
        if (clean){
            println "Repository is already clean"
        }
        println "Done!"
    }
}

// Task parameters:
//    bumpVersion -> if available will specify new versionName directly and ignores the `bumpType` parameter.
//    bumpType[major|minor|patch] -> will specify how the version bumping occurs.
task releasePrepare(dependsOn: ensureCleanRepo) {
    doLast {
        def applicationId = android.defaultConfig.applicationId
        def versionName = android.defaultConfig.versionName

        if (versionName.indexOf("-") > -1) {
            versionName = versionName.split("-")[0]
        }

        // Prepare the release commit with the specific tag.
        String buildText = buildFile.getText()
        buildText = buildText.replaceFirst(/versionName(\s+.*)/, "versionName '$versionName'")
        buildFile.setText(buildText) //replace the build file's text
        grgit.add(patterns: ['app/build.gradle'])
        try {
            grgit.commit(message: "[gradle-release-task] prepare release $applicationId-$versionName")
        } catch (Exception e) {
            throw new GradleException("Failed to commit, error:\n $e")
        }
        try {
            grgit.tag.add {
                name = versionName
                message = "Release of $versionName"
            }
        } catch (Exception e) {
            throw new GradleException("Failed to tag the repo, error:\n $e")
        }

        // Set new version name from input parameters.
        def newVersionName
        if (project.properties.containsKey("bumpVersion")) {
            newVersionName = project.properties["bumpVersion"]
            println "Bumping the version directly (bumpVersion=$newVersionName)"
        } else if (project.properties.containsKey("bumpType")) {
            def (major, minor, patch) = versionName.tokenize('.')
            switch (bumpType) {
                case "major":
                    major = major.toInteger() + 1
                    minor = 0
                    patch = 0
                    break
                case "minor":
                    minor = minor.toInteger() + 1
                    break
                case "patch":
                    patch = patch.toInteger() + 1
                    break
            }
            newVersionName = "$major.$minor.$patch"
        } else {
            throw new GradleException('Either bumpType or bumpVersion parameters should be provided')
        }

        // Prepare for next development iteration.
        def versionCode = android.defaultConfig.versionCode
        def newVersionCode = versionCode + 1
        println "Bumping versionName from $versionName to $newVersionName"
        println "Bumping versionCode from $versionCode to $newVersionCode"
        buildText = buildFile.getText()
        buildText = buildText.replaceFirst(/versionName(\s+.*)/, "versionName '$newVersionName-SNAPSHOT'")
        buildText = buildText.replaceFirst(/versionCode(\s+.*)/, "versionCode $newVersionCode")
        buildFile.setText(buildText) //replace the build file's text
        grgit.add(patterns: ['app/build.gradle'])
        grgit.commit(message: "[gradle-release-task] prepare for next development iteration")
        println "Done!"
    }
}

task releasePerform(dependsOn: ensureCleanRepo) {
    doLast {
        boolean force = false
        if (project.properties.containsKey("force")) {
            force = project.properties["force"]
        }
        println "Pushing the newest commits to the remote repository (force: $force)"
        try {
            grgit.push(force: force, tags: true)
        } catch (Exception e) {
            throw new GradleException("Failed to push to the repo,\n" +
                    " you can try using -Pforce=true parameter to force the push, error: \n$e")
        }
        println "Done!"
    }
}
