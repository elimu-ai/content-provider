plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'org.ajoberstar.grgit'
}

apply from: "${rootProject.projectDir}/gradle/prepare_release.gradle"
apply from: "${rootProject.projectDir}/gradle/clean_release.gradle"
apply from: "${rootProject.projectDir}/gradle/perform_release.gradle"
apply from: "${rootProject.projectDir}/gradle/ensure_clean.gradle"

android {
    compileSdk 34
    namespace 'ai.elimu.content_provider.utils'

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 34
        versionCode 1002029
        versionName "1.2.29-SNAPSHOT"
        setProperty("archivesBaseName", "utils-${versionName}")
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
}

dependencies {
    implementation 'com.github.elimu-ai:model:model-2.0.80' // See https://jitpack.io/#elimu-ai/model
    implementation 'com.github.elimu-ai:analytics:3.1.27@aar' // See https://jitpack.io/#elimu-ai/analytics
}

// See https://docs.gradle.org/current/dsl/org.gradle.api.publish.maven.MavenPublication.html
// Usage: ./gradlew clean build publish -PmavenUsername=***** -PmavenPassword=*****
publishing {
    publications {
        release(MavenPublication) {
            groupId 'ai.elimu.content_provider'
            artifactId 'utils'
            version '1.2.29-SNAPSHOT'
            artifact("${buildDir}/outputs/aar/utils-${version}-release.aar")
        }
    }
    repositories {
        maven {
            credentials(PasswordCredentials)
            url "https://maven.pkg.github.com/elimu-ai/content-provider"
        }
    }
}

tasks.named("publishReleasePublicationToMavenLocal") {
    mustRunAfter(":utils:bundleReleaseAar")
}

tasks.register('ensureCleanRepo') {
    doLast {
        ensureClean()
    }
}

tasks.register('releaseClean') {
    dependsOn ensureCleanRepo
    doLast {
        cleanRelease()
    }
}

// Task parameters:
//    bumpVersion -> if available will specify new versionName directly and ignores the `bumpType` parameter.
//    bumpType[major|minor|patch] -> will specify how the version bumping occurs.

tasks.register('releasePrepare') {
    dependsOn ensureCleanRepo
    doLast {
        prepareRelease()
    }
}

tasks.register('releasePerform') {
    dependsOn ensureCleanRepo
    doLast {
        performRelease()
    }
}
